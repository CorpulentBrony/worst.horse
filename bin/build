#!/bin/sh

# dirs
BIN_DIR="bin/";
CSS_DIR="css/";
JS_DIR="js/";
SCSS_DIR="scss/";

# files
_INDEX_NAME="index";
_INDEX_CSS_DIR="${CSS_DIR}${_INDEX_NAME}";
_INDEX_JS_DIR="${JS_DIR}${_INDEX_NAME}";
INDEX_CSS="${_INDEX_CSS_DIR}.css";
INDEX_CSS_MAP="${INDEX_CSS}.map";
INDEX_JS="${_INDEX_JS_DIR}.js";
INDEX_MIN_CSS="${_INDEX_CSS_DIR}.min.css";
INDEX_MIN_CSS_MAP="${INDEX_MIN_CSS}.map";
INDEX_MIN_JS="${_INDEX_JS_DIR}.min.js";
INDEX_MIN_JS_MAP="${_INDEX_NAME}.min.js.map";
INDEX_OUT_JS="${_INDEX_JS_DIR}.out.js";
INDEX_OUT_JS_MAP="${INDEX_OUT_JS}.map";
INDEX_SCSS="${SCSS_DIR}${_INDEX_NAME}.scss";
SERVER_APP_JS="${JS_DIR}server/image.js";
TSCONFIG_WEB="tsconfig.web.json";

# commands
BROWSERIFY="${BIN_DIR}browserify";
POSTCSS="${BIN_DIR}postcss";
SORCERY="${BIN_DIR}sorcery";
SCSS="/usr/local/bin/scss";
TSC="${BIN_DIR}tsc";
UGLIFYJS="${BIN_DIR}uglifyjs";

checkRegex() {
	PATTERN=`echo "${2}" | sed "s/ /\$|^/g"`;
	return $(echo "${1}" | grep -E "^${PATTERN}\$" > /dev/null 2>&1);
}

checkTarget() {
	return $(checkRegex "${TARGET}" "${1}");
}

safeDeleteDir() {
	find "${1}" -maxdepth 9 ! -name ".*" ! -name $(basename ${1}) ! -name "README.md" -delete;
}

if [ -z "${1}" ]; then
	TARGET="all";
else
	TARGET="$1";
fi

if ! checkTarget "css js server web all"; then
	echo "usage: build [css | js | server | web | all] [debug]";
	echo -e "(default to all)\n";
	echo "cannot build ${TARGET}; exiting";
	exit 1;
fi

echo building worst.horse...

echo setting working directory...
cd "${0%/*}/../";

if checkTarget "js server web all"; then
	echo updating submodules...;
	git submodule update --remote --recursive;

	if checkTarget "js all"; then
		echo cleaning out js/ directory...;
		safeDeleteDir "${JS_DIR}";
	fi

	if [ "${TARGET}" != "server" ]; then
		echo transpiling web app...;
		"${TSC}" -p "${TSCONFIG_WEB}";

		echo browserifying web app...;
		"${BROWSERIFY}" "${INDEX_JS}" --debug | ./bin/exorcist --base "${JS_DIR}" "${INDEX_OUT_JS_MAP}" > "${INDEX_OUT_JS}";

		if [ "${2}" = "debug" ]; then
			echo not uglifying web app js...;
			cp "${INDEX_OUT_JS}" "${INDEX_MIN_JS}";
			cp "${INDEX_OUT_JS_MAP}" "${JS_DIR}${INDEX_MIN_JS_MAP}";
		else
			echo uglifying web app js...;
			"${UGLIFYJS}" "${INDEX_OUT_JS}" --compress --mangle --source-map content="${INDEX_OUT_JS_MAP}",url="${INDEX_MIN_JS_MAP}" --output "${INDEX_MIN_JS}";
		fi

		echo fixing web app source maps...;
		"${SORCERY}" -i "${INDEX_MIN_JS}";
	fi
fi

if checkTarget "css all"; then
	echo cleaning out css/ directory...;
	safeDeleteDir ${CSS_DIR};

	echo transpiling scss to css...;
	#find "${SCSS_DIR}" -maxdepth 1 -name "*.scss" -type f -exec sh -c 'scss --style expanded --default-encoding UTF-8 "{}" css/$(basename "{}" ".scss").css' \;
	"${SCSS}" --style expanded --default-encoding UTF-8 "${INDEX_SCSS}" "${INDEX_CSS}";

	if [ "${2}" = "debug" ]; then
		echo not autoprefixing and minifying css...;
		cp "${INDEX_CSS}" "${INDEX_MIN_CSS}";
		cp "${INDEX_CSS_MAP}" "${INDEX_MIN_CSS_MAP}";
	else
		echo autoprefixing and minifying css...;
		"${POSTCSS}" "${INDEX_CSS}" --use autoprefixer --use cssnano | ./bin/exorcist --base "${CSS_DIR}" "${INDEX_MIN_CSS_MAP}" > "${INDEX_MIN_CSS}";
	fi

	echo fixing css source maps...;
	"${SORCERY}" -i "${INDEX_MIN_CSS}";
fi

if checkTarget "js server all"; then
	echo transpiling server app...;
	"${TSC}";

	echo making server app executable...;
	chmod +x "${SERVER_APP_JS}";
fi

echo cleaning up...;
rm -f gmon.out;