#!/bin/bash

# dirs
BIN_DIR="bin/";
CSS_DIR="css/";
JS_DIR="js/";
SCSS_DIR="scss/";
TEMPLATE_DIR="template/";

# files
declare -a _CSS_NAMES=("index" "loading");
_INDEX_NAME="index";
_STRUCTURED_DATA_NAME="structured-data";
SERVER_APP_JS="${JS_DIR}server/index.js";
TSCONFIG_WEB="tsconfig.web.json";

# commands
BROWSERIFY="${BIN_DIR}browserify";
EXORCIST="${BIN_DIR}exorcist";
HTML_MINIFIER="${BIN_DIR}html-minifier";
POSTCSS="${BIN_DIR}postcss";
SORCERY="${BIN_DIR}sorcery";
SCSS=$(command -v scss);
TSC="${BIN_DIR}tsc";
UGLIFYJS="${BIN_DIR}uglifyjs";

# less configurable file stuff
_INDEX_CSS_DIR="${CSS_DIR}${_INDEX_NAME}";
_INDEX_JS_DIR="${JS_DIR}${_INDEX_NAME}";
_STRUCTURED_DATA_DIR="${TEMPLATE_DIR}${_STRUCTURED_DATA_NAME}";
INDEX_CSS="${_INDEX_CSS_DIR}.css";
INDEX_CSS_MAP="${INDEX_CSS}.map";
INDEX_JS="${_INDEX_JS_DIR}.js";
INDEX_MIN_CSS="${_INDEX_CSS_DIR}.min.css";
INDEX_MIN_CSS_MAP="${INDEX_MIN_CSS}.map";
INDEX_MIN_JS="${_INDEX_JS_DIR}.min.js";
INDEX_MIN_JS_MAP="${_INDEX_NAME}.min.js.map";
INDEX_OUT_JS="${_INDEX_JS_DIR}.out.js";
INDEX_OUT_JS_MAP="${INDEX_OUT_JS}.map";
INDEX_SCSS="${SCSS_DIR}${_INDEX_NAME}.scss";
NUM_CSS_FILES=${#_CSS_NAMES[@]};
STRUCTURED_DATA="${_STRUCTURED_DATA_DIR}.jsonld";
STRUCTURED_DATA_MIN="${_STRUCTURED_DATA_DIR}.min.jsonld";

# build _CSS_DIRS, CSS_FILES, CSS_MAPS, CSS_MIN_FILES, CSS_MIN_MAPS, and SCSS_FILES
for ((i=0; ${i}<${NUM_CSS_FILES}; i++)); do
	_CSS_DIRS[${i}]="${CSS_DIR}${_CSS_NAMES[${i}]}";
	CSS_FILES[${i}]="${_CSS_DIRS[${i}]}.css";
	CSS_MAPS[${i}]="${CSS_FILES[${i}]}.map";
	CSS_MIN_FILES[${i}]="${_CSS_DIRS[${i}]}.min.css";
	CSS_MIN_MAPS[${i}]="${CSS_MIN_FILES[${i}]}.map";
	SCSS_FILES[${i}]="${SCSS_DIR}${_CSS_NAMES[${i}]}.scss";
done

checkRegex() {
	PATTERN=`echo "${2}" | sed "s/ /\$|^/g"`;
	return $(echo "${1}" | grep -E "^${PATTERN}\$" > /dev/null 2>&1);
}

checkTarget() {
	return $(checkRegex "${TARGET}" "${1}");
}

safeDeleteDir() {
	find "${1}" -maxdepth 9 ! -name ".*" ! -name $(basename ${1}) ! -name "README.md" -delete;
}

if [ -z "${1}" ]; then
	TARGET="all";
else
	TARGET="$1";
fi

if ! checkTarget "css js json server web all"; then
	echo "usage: build [css | js | json | server | web | all] [debug]";
	echo -e "(default to all)\n";
	echo "cannot build ${TARGET}; exiting";
	exit 1;
fi

echo "building worst.horse [target=${TARGET}]...";

echo setting working directory...
cd "${0%/*}/../";

if checkTarget "js server web all"; then
	echo updating submodules...;
	git submodule update --remote --recursive;

	if checkTarget "js all"; then
		echo cleaning out js/ directory...;
		safeDeleteDir "${JS_DIR}";
	fi

	if [ "${TARGET}" != "server" ]; then
		echo transpiling web app...;
		"${TSC}" -p "${TSCONFIG_WEB}";

		echo browserifying web app...;
		"${BROWSERIFY}" "${INDEX_JS}" --debug | "${EXORCIST}" --base "${JS_DIR}" "${INDEX_OUT_JS_MAP}" > "${INDEX_OUT_JS}";

		if [ "${2}" = "debug" ]; then
			echo not uglifying web app js...;
			cp "${INDEX_OUT_JS}" "${INDEX_MIN_JS}";
			cp "${INDEX_OUT_JS_MAP}" "${JS_DIR}${INDEX_MIN_JS_MAP}";
		else
			echo uglifying web app js...;
			"${UGLIFYJS}" "${INDEX_OUT_JS}" --compress --mangle --source-map content="${INDEX_OUT_JS_MAP}",url="${INDEX_MIN_JS_MAP}" --output "${INDEX_MIN_JS}";
		fi

		echo fixing web app source maps...;
		"${SORCERY}" -i "${INDEX_MIN_JS}";
	fi
fi

if checkTarget "json web all"; then
	if [ "${2}" = "debug" ]; then
			echo not minifying json...;
			cp "${STRUCTURED_DATA}" "${STRUCTURED_DATA_MIN}";
		else
			echo minifying json...;
			"${HTML_MINIFIER}" --collapse-inline-tag-whitespace --collapse-whitespace --process-scripts ["application/ld+json"] --quote-character "\"" --remove-comments --output "${STRUCTURED_DATA_MIN}" "${STRUCTURED_DATA}";
		fi
fi

if checkTarget "css all"; then
	echo cleaning out css/ directory...;
	safeDeleteDir ${CSS_DIR};

	echo transpiling scss to css...;
	#find "${SCSS_DIR}" -maxdepth 1 -name "*.scss" -type f -exec sh -c 'scss --style expanded --default-encoding UTF-8 "{}" css/$(basename "{}" ".scss").css' \;
	for ((i=0; ${i}<${NUM_CSS_FILES}; i++)); do
		"${SCSS}" --style expanded --default-encoding UTF-8 "${SCSS_FILES[${i}]}" "${CSS_FILES[${i}]}";
	done

	if [ "${2}" = "debug" ]; then
		echo not autoprefixing and minifying css...;
		for ((i=0; ${i}<${NUM_CSS_FILES}; i++)); do
			cp "${CSS_FILES[${i}]}" "${CSS_MIN_FILES[${i}]}";
			cp "${CSS_MAPS[${i}]}" "${CSS_MIN_MAPS[${i}]}";
		done
	else
		echo autoprefixing and minifying css...;
		for ((i=0; ${i}<${NUM_CSS_FILES}; i++)); do
			"${POSTCSS}" "${CSS_FILES[${i}]}" --use autoprefixer --use cssnano | "${EXORCIST}" --base "${CSS_DIR}" "${CSS_MIN_MAPS[${i}]}" > "${CSS_MIN_FILES[${i}]}";
		done
	fi

	echo fixing css source maps...;
	for ((i=0; ${i}<${NUM_CSS_FILES}; i++)); do
		"${SORCERY}" -i "${CSS_MIN_FILES[${i}]}";
	done
fi

if checkTarget "js server all"; then
	echo transpiling server app...;
	"${TSC}";

	echo making server app executable...;
	chmod +x "${SERVER_APP_JS}";
fi

echo cleaning up...;
rm -f ./gmon.out;